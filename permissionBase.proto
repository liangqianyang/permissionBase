syntax = "proto3";

package permissionBase;
import "google/protobuf/wrappers.proto";
option go_package="./permissionBase";

// 分页信息.
message PageInfo {
  // 总数.
  int64 total = 1;
  // 页码.
  int64 page = 2;
  // 每页数量.
  int64 page_size = 3;
}

// 用户状态的枚举
enum UserState {
  USER_STATE_UNKNOWN = 0; // 未知
  USER_STATE_DISABLE = -1; // 禁用
  USER_STATE_ENABLE = 1; // 启用
}

// 用户性别的枚举
enum UserGender {
  USER_Gender_UNKNOWN = 0; // 未知
  USER_Gender_MALE = 1; // 男
  USER_GENDER_FEMALE = 2; // 女
}

// 菜单状态的枚举
enum MenuState {
  MENU_STATE_UNKNOWN = 0; // 未知
  MENU_STATE_DISABLE = -1; // 禁用
  MENU_STATE_ENABLE = 1; // 启用
}

// 菜单类型的枚举
enum MenuType {
  MENU_TYPE_UNKNOWN = 0; // 未知
  MENU_TYPE_MENU = 1; // 菜单
}

// 创建用户的请求
message CreateUserRequest {
  // 用户名.
  string username = 1;
  // 昵称.
  string nickname = 2;
  // 密码.
  string password = 3;
  // 手机号.
  string mobile = 4;
  // 邮箱.
  string email = 5;
  UserGender gender = 6;
}

// 创建用户的响应
message CreateUserResponse {
  int64 id = 1;
}

// 更新用户的请求
message UpdateUserRequest {
  // 用户ID.
  int64 id = 1;
  // 用户名.
  optional string username = 2;
  // 昵称.
  optional string nickname = 3;
  // 密码.
  optional string password = 4;
  // 手机号.
  optional string mobile = 5;
  // 邮箱.
  optional string email = 6;
  // 性别.
  UserGender gender = 7;
  // 状态.
  UserState state = 8;
}

// 更新用户的响应
message UpdateUserResponse {}

// 删除用户的请求
message DeleteUserRequest {
  // 用户ID.
  repeated int64 id = 1;
}

// 删除用户的响应
message DeleteUserResponse {}

// 登陆的请求
message LoginRequest {
  // 用户名.
  string username = 1;
  // 密码.
  string password = 2;
}

// 登陆的响应
message LoginResponse {
  // 用户ID.
  int64 id = 1;
  // 用户名.
  string username = 2;
  // 昵称.
  string nickname = 3;
  // token.
  string token = 4;
}

// 创建菜单的请求
message CreateMenuRequest {
  // 父菜单ID.
  int64 parent_id = 1;
  // 菜单类型.
  MenuType menu_type = 2;
  // 菜单名称.
  string name = 3;
  // 菜单图标.
  string icon = 4;
  // 菜单组件.
  string component = 5;
  // 菜单组件名称.
  string component_name = 6;
  // 菜单路径.
  string path = 7;
  // 排序.
  int64 sort = 8;
  // 是否隐藏.
  int64 hidden = 9;
  // 是否一直显示.
  int64 always_show = 10;
  // 是否缓存.
  int64 no_cache = 11;
  // 是否显示面包屑.
  int64 breadcrumb = 12;
  // 是否固定在tagsView.
  int64 affix = 13;
  // 是否在tagsView显示.
  int64 no_tags_view = 14;
  // 状态.
  MenuState state = 15;
}

// 创建菜单的响应
message CreateMenuResponse {

}

// 更新菜单的请求
message UpdateMenuRequest {
  // 菜单ID.
  int64 id = 1;
  // 父菜单ID.
  int64 parent_id = 2;
  // 菜单类型.
  MenuType menu_type = 3;
  // 菜单名称.
  string name = 4;
  // 菜单图标.
  string icon = 5;
  // 菜单组件.
  string component = 6;
  // 菜单组件名称.
  string component_name = 7;
  // 菜单路径.
  string path = 8;
  // 排序.
  int64 sort = 9;
  // 状态.
  MenuState state = 10;
  // 是否隐藏.
  int64 hidden = 11;
  // 是否一直显示.
  int64 always_show = 12;
  // 是否缓存.
  int64 no_cache = 13;
  // 是否显示面包屑.
  int64 breadcrumb = 14;
  // 是否固定在tagsView.
  int64 affix = 15;
  // 是否在tagsView显示.
  int64 no_tags_view = 16;
}

// 更新菜单的响应
message UpdateMenuResponse {

}

message MenuMeta {
  // 标题.
  string title = 1;
  // 图标.
  string icon = 2;
  // 是否隐藏.
  int64 hidden = 3;
  // 是否一直显示.
  int64 always_show = 4;
  // 是否缓存.
  int64 no_cache = 5;
  // 是否显示面包屑.
  int64 breadcrumb = 6;
  // 是否固定在tagsView.
  int64 affix = 7;
  // 是否在tagsView显示.
  int64 no_tags_view = 8;
}

// 菜单信息
message MenuInfo {
  // 父菜单ID.
  int64 parent_id = 1;
  // 菜单ID.
  int64 id = 2;
  // 菜单名称.
  string name = 3;
  // 菜单组件.
  string component = 4;
  // 菜单路径.
  string path = 5;
  // 菜单标题.
  string title = 6;
  // 菜单类型.
  MenuType menu_type = 7;
  // 状态.
  MenuState state = 8;
  // 跳转地址.
  string redirect = 9;
  // 菜单属性.
  MenuMeta meta = 10;
  // 子菜单.
  repeated MenuInfo children = 11;
}

// 获取菜单列表的请求
message GetMenuListRequest {
  // 父菜单ID.
  int64 parent_id = 1;
  // 菜单名称.
  string name = 2;
  // 菜单类型.
  MenuType menu_type = 3;
  // 状态.
  MenuState state = 4;
}

// 获取菜单列表的响应
message GetMenuListResponse {
  // 菜单列表.
  repeated MenuInfo list = 1;
}


// 设置菜单权限的请求
message SetMenuPermissionRequest {
  // 菜单ID.
  int64 menu_id = 1;
  // 权限ID.
  repeated int64 permission_id = 2;
}

// 设置菜单权限的响应
message SetMenuPermissionResponse {
}

// 权限状态的枚举
enum PermissionState {
  PERMISSION_STATE_UNKNOWN = 0; // 未知
  PERMISSION_STATE_DISABLE = -1; // 禁用
  PERMISSION_STATE_ENABLE = 1; // 启用
}

// 创建权限的请求
message CreatePermissionRequest {
  // 权限名称.
  string name = 1;
  // 权限标识.
  string identify_name = 2;
  // 控制器.
  string controller= 3;
  // 动作.
  string action = 4;
  // 权限描述.
  string description = 5;
}

// 创建权限的响应
message CreatePermissionResponse {

}

// 更新权限的请求
message UpdatePermissionRequest {
  // 权限ID.
  int64 id = 1; // @gotags: validate:"required"
  // 权限名称.
  string name = 2; // @gotags: validate:"omitempty,max=32"
  // 权限标识.
  string identify_name = 3; // @gotags: validate:"omitempty,max=32"
  // 控制器.
  string controller = 4; // @gotags: validate:"omitempty,max=32"
  // 动作.
  string action = 5; // @gotags: validate:"omitempty,max=32"
  // 状态.
  PermissionState state = 6; // @gotags: validate:"omitempty"
  // 权限描述.
  string description = 7; // @gotags: validate:"omitempty,max=128"
}

// 更新权限的响应
message UpdatePermissionResponse {

}

// 权限信息
message PermissionInfo {
  // 权限ID.
  int64 id = 1;
  // 权限名称.
  string name = 2;
  // 权限标识.
  string identify_name = 3;
  // 控制器.
  string controller = 4;
  // 动作.
  string action = 5;
  // 权限描述.
  string description = 6;
  // 状态.
  PermissionState state = 7;
  // 创建时间.
  string created_at = 8;
  // 更新时间.
  string updated_at = 9;
}

// 获取权限列表的请求
message GetPermissionListRequest {
  // 权限名称.
  string name = 1;
  // 权限标识.
  string identify_name = 2;
  // 控制器.
  string controller = 3;
  // 动作.
  string action = 4;
  // 状态.
  PermissionState state = 5;
  // 页码.
  int64 page = 6;
  // 每页数量.
  int64 page_size = 7;
}

// 获取权限列表的响应
message GetPermissionListResponse {
  // 权限列表.
  repeated PermissionInfo list = 1;
  // 分页信息.
  PageInfo page = 2;
}

// 角色状态的枚举
enum RoleState {
  ROLE_STATE_UNKNOWN = 0; // 未知
  ROLE_STATE_DISABLE = -1; // 禁用
  ROLE_STATE_ENABLE = 1; // 启用
}

// 创建角色的请求
message CreateRoleRequest {
  string name = 1;
  string description = 2;
}

// 创建角色的响应
message CreateRoleResponse {

}

// 更新角色的请求
message UpdateRoleRequest {
  int64 id = 1;
  string name = 2; // @gotags: validate:"omitempty,max=32"
  string description = 3; // @gotags: validate:"omitempty,max=128"
  RoleState state = 4; // @gotags: validate:"omitempty"
}

// 更新角色的响应
message UpdateRoleResponse {

}

// 角色信息
message RoleInfo {
  // 角色ID.
  int64 id = 1;
  // 角色名称.
  string name = 2;
  // 角色描述.
  string description = 3;
  // 角色状态.
  RoleState state = 4;
  // 创建时间.
  string created_at = 5;
  // 更新时间.
  string updated_at = 6;
}

// 获取角色列表的请求
message GetRoleListRequest {
  // 角色名称.
  string name = 1;
  // 角色状态.
  RoleState state = 2;
  // 页码.
  int64 page = 3;
  // 每页数量.
  int64 page_size = 4;
}

// 获取角色列表的响应
message GetRoleListResponse {
  repeated RoleInfo list = 1;
  PageInfo page = 2;
}

// 设置角色菜单的请求
message SetRoleMenuRequest {
  // 角色ID.
  int64 role_id = 1;
  // 菜单ID.
  repeated int64 menu_id = 2;
}

// 设置角色菜单的响应
message SetRoleMenuResponse {

}

// 获取用户列表的请求
message GetUserListRequest {
  // 登录名.
  string username = 1;
  // 昵称.
  string nickname = 2;
  // 状态.
  UserState state = 3;
  // 页码.
  int64 page = 4;
  // 每页数量.
  int64 page_size = 5;
}

// 性别的枚举
enum GenderEnum {
  GENDER_UNKNOWN = 0; // 未知
  GENDER_MALE = 1; // 男
  GENDER_FEMALE = 2; // 女
}

// 用户信息
message UserInfo {
  // 用户ID.
  int64 id = 1;
  // 登录名.
  string username = 2;
  // 昵称.
  string nickname = 3;
  // 手机号.
  string mobile = 4;
  // 邮箱.
  string email = 5;
  // 性别.
  GenderEnum gender = 6;
  // 状态.
  UserState state = 7;
  // 创建时间.
  string created_at = 8;
}

// 获取用户列表的响应
message GetUserListResponse {
  repeated UserInfo list = 1;
  PageInfo page = 2;
}

// 设置用户角色的请求
message SetUserRoleRequest {
  // 角色ID.
  int64 role_id = 1;
  // 用户ID.
  repeated int64 user_id = 2;
}

// 设置用户角色的响应
message SetUserRoleResponse {

}

service PermissionBase {
  // CreateMenu 创建菜单
  rpc CreateMenu(CreateMenuRequest) returns(CreateMenuResponse);
  // UpdateMenu 更新菜单
  rpc UpdateMenu(UpdateMenuRequest) returns(UpdateMenuResponse);
  // GetMenuList 获取菜单列表
  rpc GetMenuList(GetMenuListRequest) returns(GetMenuListResponse);
  // CreatePermission 创建权限
  rpc CreatePermission(CreatePermissionRequest) returns(CreatePermissionResponse);
  // UpdatePermission 更新权限
  rpc UpdatePermission(UpdatePermissionRequest) returns(UpdatePermissionResponse);
  // GetPermissionList 获取权限列表
  rpc GetPermissionList(GetPermissionListRequest) returns(GetPermissionListResponse);
  // CreateRole 创建角色
  rpc CreateRole(CreateRoleRequest) returns(CreateRoleResponse);
  // UpdateRole 更新角色
  rpc UpdateRole(UpdateRoleRequest) returns(UpdateRoleResponse);
  // GetRoleList 获取角色列表
  rpc GetRoleList(GetRoleListRequest) returns(GetRoleListResponse);
  // SetMenuPermission 设置菜单权限
  rpc SetMenuPermission(SetMenuPermissionRequest) returns(SetMenuPermissionResponse);
  // SetRoleMenu 设置角色菜单
  rpc SetRoleMenu(SetRoleMenuRequest) returns(SetRoleMenuResponse);
  // GetUserList 获取用户列表
  rpc GetUserList(GetUserListRequest) returns(GetUserListResponse);
  // SetUserRole 设置用户角色
  rpc SetUserRole(SetUserRoleRequest) returns(SetUserRoleResponse);
}

service UserBase {
  // CreateUser 创建用户
  rpc CreateUser(CreateUserRequest) returns(CreateUserResponse);
  // UpdateUser 更新用户
  rpc UpdateUser(UpdateUserRequest) returns(UpdateUserResponse);
  // DeleteUser 删除用户
  rpc DeleteUser(DeleteUserRequest) returns(DeleteUserResponse);
  // Login 登录
  rpc Login(LoginRequest) returns(LoginResponse);
}
